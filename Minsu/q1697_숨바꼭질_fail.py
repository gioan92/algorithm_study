# 수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다.
# 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.
# 수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.
# 입력: 첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.
# 출력: 수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

N, K = map(int, input().split());

if N >= K:
    print(N - K);
else:
    binN = format(N, 'b');
    binK = format(K, 'b');
    if len(binN) == len(binK):
        pass

# X2가 이진수로 비트이동 (비트이동 연산자 <<) 임을 이용하여 풀려고 했는데 고려해야 할 조건이 너무 많다.
# 처음에는 이진수에서 bit xor (연산자 ^)로 차이가 나는 것으로 쉽게 풀 수 있지 않을까 생각했지만 -1의 존재때문에 불가능
# BFS(너버 우선 탐색)을 이용하여 풀어야함 